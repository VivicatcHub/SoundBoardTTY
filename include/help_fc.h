/*
** EPITECH PROJECT, 2024
** EmptyRepo
** File description:
** help_fc.h
*/

#ifndef HELP_FC
    #define HELP_FC

////////////////////////////////////////////////////////////
/// INCLUDES
////////////////////////////////////////////////////////////

    #include <errno.h>
    #include <fcntl.h>
    #include <stdarg.h>
    #include <stdlib.h>
    #include <sys/stat.h>
    #include <unistd.h>

////////////////////////////////////////////////////////////
/// ERRORS
////////////////////////////////////////////////////////////

    #define NOERROR 0
    #define ERROR 84
    #define ERROR_MALLOC ERROR
    #define ERROR_OPENING ERROR
    #define ERROR_STR NULL

////////////////////////////////////////////////////////////
/// MAX VALUES
////////////////////////////////////////////////////////////

    #define INT_MAX 2147483647
    #define INT_MIN -2147483648

////////////////////////////////////////////////////////////
/// BOOL
////////////////////////////////////////////////////////////

    #define TRUE 1
    #define FALSE 0

////////////////////////////////////////////////////////////
/// ASCII
////////////////////////////////////////////////////////////

    #define INT(a) (a - '0')
    #define STR(a) (a + '0')
    #define UPPER(a) (a - 32)
    #define LOWER(a) (a + 32)

////////////////////////////////////////////////////////////
/// ROUND
////////////////////////////////////////////////////////////

    #define ROUND(x) ((x % 1) >= 0.5 ? (int) x + 1 : (int) x)
    #define MIN_ROUND(x) ((int) x)
    #define MAX_ROUND(x) (x % 1 == 0 ? (int) x : (int) x + 1)

////////////////////////////////////////////////////////////
/// TYPE CHAR
////////////////////////////////////////////////////////////

    #define IS_NUMERICAL(x) ('0' <= x && x <= '9')
    #define IS_LOWER(x) ('a' <= x && x <= 'z')
    #define IS_UPPER(x) ('A' <= x && x <= 'Z')
    #define IS_ALPHABETICAL(x) (IS_LOWER(x) || IS_UPPER(x))
    #define IS_PRINTABLE(x) (' ' <= x && x <= '~')
    #define IS_ALPHANUMERICAL(x) (IS_NUMERICAL(x) || IS_ALPHABETICAL(x))

////////////////////////////////////////////////////////////
/// MINI CALC
////////////////////////////////////////////////////////////

    #define ABS(x) (x > 0 ? x : -x)
    #define MAX(a, b) (a >= b ? a : b)
    #define MIN(a, b) (a < b ? a : b)

////////////////////////////////////////////////////////////
/// base_fc.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Transform a decimal into an hexadecimal
///
/// \param nb An integer in decimal
///
/// \return A string with the hexadecimal code
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *dec_to_hex(int nb);
////////////////////////////////////////////////////////////
/// \brief Convert and display a decimal number into a
///        number in a given base.
///
/// \param nbr Number to transform
/// \param base Base of transformation
///
/// \return true(1) if not error, false(0) if not
////////////////////////////////////////////////////////////
int my_putnbr_base(int nbr, char const *base);
////////////////////////////////////////////////////////////
/// \brief Convert a decimal number into a
///        number in a given base.
///
/// \param nbr Number to transform
/// \param base Base of transformation
///
/// \return Number transformed
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *my_putnbr_base_result(int nbr, char const *base);
////////////////////////////////////////////////////////////
/// \brief Convert and return a number (provided as a string)
///        in a given base into a decimal number
///
/// \param nbr Number to transform
/// \param base Base of transformation
///
/// \return Number transformed
////////////////////////////////////////////////////////////
int my_getnbr_base(char const *str, char const *base);
////////////////////////////////////////////////////////////
/// \brief Returns the result from the nbr string conversion
///        (expressed in a base_from radix to a base_to radix)
///
/// \param nbr Number to transform
/// \param base_from Base of the number
/// \param base_to Base of transformation
///
/// \return Number transformed
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *convert_base(char const *nbr, char const *base_from,
    char const *base_to);

////////////////////////////////////////////////////////////
/// calc_fc.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Calc the factorial of a nulber
///
/// \param nb An integer
///
/// \return The Factorial of `nb`
////////////////////////////////////////////////////////////
int my_compute_factorial(int nb);
////////////////////////////////////////////////////////////
/// \brief Calc the `nb` raised to the power `p`
///
/// \param nb An integer to raise
/// \param p The power
///
/// \return `nb`^`p`
////////////////////////////////////////////////////////////
int my_compute_power(int nb, int p);
////////////////////////////////////////////////////////////
/// \brief Calc the root of an integer
///
/// \param nb An integer to raise
///
/// \return `nbÂ²`
////////////////////////////////////////////////////////////
int my_compute_square_root(int nb);
////////////////////////////////////////////////////////////
/// \brief Find if an integer is prime
///
/// \param nb An integer
///
/// \return true(1) if he's prime, false(0) if not
////////////////////////////////////////////////////////////
int my_is_prime(int nb);

////////////////////////////////////////////////////////////
/// cast_functions.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Cast an `int` into a `char *`
///
/// \param nb Integer to cast
///
/// \return A string with the integer inside
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *int_to_str(long long int nb);
////////////////////////////////////////////////////////////
/// \brief Cast a `char` into a `char *`
///
/// \param c One character
///
/// \return A size 1 string with only 1 `char`
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *char_to_str(char c);
////////////////////////////////////////////////////////////
/// \brief Cast a `char *` into an `int`
///
/// \param str String to cast
///
/// \return Integer casted
////////////////////////////////////////////////////////////
int str_to_int(char *str);
////////////////////////////////////////////////////////////
/// \brief Get a number into a string
///
/// \param str String containing a number
///
/// \return An integer
////////////////////////////////////////////////////////////
int my_getnbr(char const *str);
////////////////////////////////////////////////////////////
/// \brief Cast a `float` into a `char *`
///
/// \param nb A float to cast
/// \param prec Precision after dot
///
/// \return A string with the float inside
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *float_to_str(double nb, int prec);

////////////////////////////////////////////////////////////
/// display_functions.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Display a string in the terminal
///
/// \param str String to display
///
/// \return Number of displayed characters
////////////////////////////////////////////////////////////
int my_putstr(char *str);
////////////////////////////////////////////////////////////
/// \brief Display a character in the terminal
///
/// \param c Character to display
///
/// \return Number of displayed characters (`1`)
////////////////////////////////////////////////////////////
int my_putchar(char c);
////////////////////////////////////////////////////////////
/// \brief Display an integer in the terminal
///
/// \param nb Integer to display
///
/// \return Number of displayed characters
////////////////////////////////////////////////////////////
int my_putnbr(int nb);
////////////////////////////////////////////////////////////
/// \brief Display a string in the terminal like an error
///
/// \param error Error to display
///
/// \return Number of displayed characters
////////////////////////////////////////////////////////////
int my_puterror(char *error);
////////////////////////////////////////////////////////////
/// \brief Display a float in the terminal
///
/// \param nb Float to display
/// \param prec Precision after the dot
///
/// \return Number of displayed characters
////////////////////////////////////////////////////////////
int my_put_nbr_float(double nb, int prec);
////////////////////////////////////////////////////////////
/// \brief Display only characters printable and hexacode
///        for others
///
/// \param str String to display
////////////////////////////////////////////////////////////
void my_showstr(char const *str);

////////////////////////////////////////////////////////////
/// error_handling_functions.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Malloc a variable with error handling
///
/// \param w Size wanted to be allocated
///
/// \return Memory allocation
////////////////////////////////////////////////////////////
void *emalloc(size_t w);

////////////////////////////////////////////////////////////
/// file_gestion_fc.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Open a file and read datas
///
/// \param file Name of the file
///
/// \return Datas of the file
////////////////////////////////////////////////////////////
char *open_file(char *file);
////////////////////////////////////////////////////////////
/// \brief Calc the size of a file
///
/// \param file Name of the file
///
/// \return Number of characters into the file
////////////////////////////////////////////////////////////
int size_of_file(char *file);

////////////////////////////////////////////////////////////
/// int_array_fc.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Sort an integer array in ascending order
///
/// \param array Array to sort
/// \param size Size of the array
////////////////////////////////////////////////////////////
void my_sort_int_array(int *array, int size);

////////////////////////////////////////////////////////////
/// int_functions.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Return size of an `int`
///
/// \param nb Integer
///
/// \return Size of the `int`
////////////////////////////////////////////////////////////
int size_of_int(long long int nb);
////////////////////////////////////////////////////////////
/// \brief Swap the content of two integers
///
/// \param a First pointer from integer
/// \param b Second one
////////////////////////////////////////////////////////////
void my_swap(int *a, int *b);

////////////////////////////////////////////////////////////
/// mini_printf.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Simplified printf function
///
/// \param format String with text and format specifiers ('%')
/// \param ... Arguments matching the format specifiers
///
/// \return Number of characters written,
///         or a negative value on error
////////////////////////////////////////////////////////////
int mini_printf(char *format, ...);

////////////////////////////////////////////////////////////
/// str_array_fc.C
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Split a string into several strings
///
/// \param str String to split
/// \param c Delimiter
///
/// \return Array of strings
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char **my_strsplit(char *str, char c);
////////////////////////////////////////////////////////////
/// \brief Display the content of an array of words
///
/// \param tab Array of words
///
/// \return true(1) if no error, false(0) if not
////////////////////////////////////////////////////////////
int my_show_word_array(char *const *tab);
////////////////////////////////////////////////////////////
/// \brief Split a string into words
///
/// \param str String to split
///
/// \return Array of strings
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char **my_str_to_word_array(char const *str);

////////////////////////////////////////////////////////////
/// str_functions.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Return the size of a string
///
/// \param str String to calculate size
///
/// \return Length of the string
////////////////////////////////////////////////////////////
int my_strlen(char *str);
////////////////////////////////////////////////////////////
/// \brief Reverse a string
///
/// \param str String to reverse
///
/// \return Reversed string
////////////////////////////////////////////////////////////
char *my_revstr(char *str);
////////////////////////////////////////////////////////////
/// \brief Duplicate a string
///
/// \param str String to duplicate
///
/// \return Copy of the string
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *my_strdup(char *str);
////////////////////////////////////////////////////////////
/// \brief Compare two strings
///
/// \param str1 First string
/// \param str2 Second String
///
/// \return 0 if `str1` and `str2` are equals
///         if not difference between `str1` and `str2`
////////////////////////////////////////////////////////////
int my_strcmp(char *str1, char *str2);
////////////////////////////////////////////////////////////
/// \brief Test if a string contain a character
///
/// \param str String with several characters
/// \param c Character to search into
///
/// \return Bool, true(1) if he is, false(0) if not
////////////////////////////////////////////////////////////
int my_strcontain(char *str, char c);
////////////////////////////////////////////////////////////
/// \brief Concatenate two strings into only one
///
/// \param str1 First string
/// \param str2 Second string
///
/// \return One string with the two inside
///
/// \attention Return want to be free
////////////////////////////////////////////////////////////
char *str_to_str(char *str1, char *str2);
////////////////////////////////////////////////////////////
/// \brief Replace a character by an other in a string
///
/// \param str String with several characters
/// \param c Character to replace
/// \param new_c New character to put in the string
////////////////////////////////////////////////////////////
void replace(char *str, char c, char new_c);
////////////////////////////////////////////////////////////
/// \brief Concatenate two strings into only one
///
/// \param dest First string
/// \param src Second string
///
/// \return One string with the two inside
////////////////////////////////////////////////////////////
char *my_strcat(char *dest, char const *src);
////////////////////////////////////////////////////////////
/// \brief Create a copy of a string
///
/// \param dest Destination to put copy
/// \param src String to copy
///
/// \return New copy
////////////////////////////////////////////////////////////
char *my_strcpy(char *dest, char const *src);
////////////////////////////////////////////////////////////
/// \brief Put a string in capitalize
///
/// \param str String to transform
///
/// \return String modified
////////////////////////////////////////////////////////////
char *my_strcapitalize(char *str);
////////////////////////////////////////////////////////////
/// \brief Put a string in lower
///
/// \param str String to transform
///
/// \return String modified
////////////////////////////////////////////////////////////
char *my_strlowcase(char *str);
////////////////////////////////////////////////////////////
/// \brief Put a string in upper
///
/// \param str String to transform
///
/// \return String modified
////////////////////////////////////////////////////////////
char *my_strupcase(char *str);
////////////////////////////////////////////////////////////
/// \brief Find the first occurence of a string into an other
///
/// \param str String to search in
/// \param to_find String to search
///
/// \return First element of finded occurence (or NULL)
////////////////////////////////////////////////////////////
char *my_strstr(char *str, char const *to_find);

////////////////////////////////////////////////////////////
/// strn_fc.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Concatenate two strings into only one but with
///        only n characters
///
/// \param dest First string
/// \param src Second string
/// \param nb Size of string
///
/// \return One string with the two inside
////////////////////////////////////////////////////////////
char *my_strncat(char *dest, char const *src, int nb);
////////////////////////////////////////////////////////////
/// \brief Compare two strings but only first n characters
///
/// \param s1 First string
/// \param s2 Second String
/// \param n Comparison between first n characters
///
/// \return 0 if `str1` and `str2` are equals
///         if not difference between `str1` and `str2`
////////////////////////////////////////////////////////////
int my_strncmp(char const *s1, char const *s2, int n);
////////////////////////////////////////////////////////////
/// \brief Create a copy of a string but only first n characters
///
/// \param dest Destination to put copy
/// \param src String to copy
/// \param n Number of characters to copy
///
/// \return New copy
////////////////////////////////////////////////////////////
char *my_strncpy(char *dest, char const *src, int n);

////////////////////////////////////////////////////////////
/// test_str_fc.c
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Test if a string contain only alphabetical characters
///
/// \param str String to test
///
/// \return true(1) if is true, false(0) if not
////////////////////////////////////////////////////////////
int my_str_isalpha(char const *str);
////////////////////////////////////////////////////////////
/// \brief Test if a string contain only lower characters
///
/// \param str String to test
///
/// \return true(1) if is true, false(0) if not
////////////////////////////////////////////////////////////
int my_str_islower(char const *str);
////////////////////////////////////////////////////////////
/// \brief Test if a string contain only upper characters
///
/// \param str String to test
///
/// \return true(1) if is true, false(0) if not
////////////////////////////////////////////////////////////
int my_str_isupper(char const *str);
////////////////////////////////////////////////////////////
/// \brief Test if a string contain only numerical characters
///
/// \param str String to test
///
/// \return true(1) if is true, false(0) if not
////////////////////////////////////////////////////////////
int my_str_isnum(char const *str);
////////////////////////////////////////////////////////////
/// \brief Test if a string contain only printable characters
///
/// \param str String to test
///
/// \return true(1) if is true, false(0) if not
////////////////////////////////////////////////////////////
int my_str_isprintable(char const *str);

#endif /* !HELP_FC */
