#ifndef HEADER
    #define HEADER

////////////////////////////////////////////////////////////
/// INCLUDE
////////////////////////////////////////////////////////////

    #include "help_fc.h"
    #include <ao/ao.h>
    #include <limits.h>
    #include <mpg123.h>
    #include <ncurses.h>
    #include <pthread.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <unistd.h>

////////////////////////////////////////////////////////////
/// STRUCTS
////////////////////////////////////////////////////////////

typedef struct {
    char name[100];
    char path[256];
} Sound;

////////////////////////////////////////////////////////////
/// ORDER
////////////////////////////////////////////////////////////

    #define PLAY_SOUND 0
    #define ADD_SOUND 2
    #define UPD_SOUND 3
    #define DEL_SOUND 4
    #define VOLUME 6
    #define HELP 7
    #define QUIT 8

////////////////////////////////////////////////////////////
/// VALUES
////////////////////////////////////////////////////////////

    #define MAX_LINES 9
    #define MAX_SOUNDS 100
    #define BITS 8

    #define MARGIN_TOP 2
    #define MARGIN_LEFT 5

extern Sound sounds[MAX_SOUNDS];
extern int sound_count;
extern pthread_t play_thread;
extern char sounds_file_path[1024];
extern int stop_playback;

////////////////////////////////////////////////////////////
/// main
////////////////////////////////////////////////////////////

void draw_menu(int highlight);
void draw_submenu(const char *title, Sound *sounds, int num_sounds,
    int highlight);
void handle_add_sound(void);
void handle_update_sound(void);
void handle_delete_sound(void);
void handle_play_sound(void);

////////////////////////////////////////////////////////////
/// add
////////////////////////////////////////////////////////////

void handle_add_sound(void);

////////////////////////////////////////////////////////////
/// bd_gestion
////////////////////////////////////////////////////////////

void read_sounds(void);
void write_sounds(void);

////////////////////////////////////////////////////////////
/// delete
////////////////////////////////////////////////////////////

void handle_delete_sound(void);

////////////////////////////////////////////////////////////
/// flag_gestion
////////////////////////////////////////////////////////////

void flag_gestion(char **av);

////////////////////////////////////////////////////////////
/// play
////////////////////////////////////////////////////////////

void handle_play_sound(void);

////////////////////////////////////////////////////////////
/// update
////////////////////////////////////////////////////////////

void handle_update_sound(void);

////////////////////////////////////////////////////////////
/// volume
////////////////////////////////////////////////////////////

void handle_volume(void);

#endif /* !HEADER */
