#ifndef HEADER
    #define HEADER

////////////////////////////////////////////////////////////
/// INCLUDE
////////////////////////////////////////////////////////////

    #include "help_fc.h"
    #include <ao/ao.h>
    #include <limits.h>
    #include <mpg123.h>
    #include <ncurses.h>
    #include <pthread.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <unistd.h>

////////////////////////////////////////////////////////////
/// STRUCTS
////////////////////////////////////////////////////////////

typedef struct {
    char name[100];
    char path[256];
} Sound_t;

////////////////////////////////////////////////////////////
/// ORDER
////////////////////////////////////////////////////////////

    #define PLAY_SOUND 0
    #define ADD_SOUND 2
    #define UPD_SOUND 3
    #define DEL_SOUND 4
    #define VOLUME 6
    #define HELP 7
    #define QUIT 8

////////////////////////////////////////////////////////////
/// VALUES
////////////////////////////////////////////////////////////

    #define MAX_LINES 9
    #define MAX_SOUNDS 100
    #define BITS 8

    #define MARGIN_TOP_SEARCH 2
    #define MARGIN_TOP 4
    #define MARGIN_LEFT 5

    #define MAX_NAME 32
    #define MAX_PATH 256

////////////////////////////////////////////////////////////
/// GLOBAL
////////////////////////////////////////////////////////////

typedef struct Global {
    Sound_t sounds[MAX_SOUNDS];
    int sound_count;
    pthread_t play_thread;
    char sounds_file_path[1024];
    int stop_playback;
    pthread_mutex_t lock;
    int is_finished;
    const char *path;
    ao_device *dev;
    char search[MAX_NAME];
    Sound_t selected;
    int sound_displayed;
} Global_t;

////////////////////////////////////////////////////////////
/// display_submenu
////////////////////////////////////////////////////////////

void draw_menu(int highlight);
void draw_submenu(const char *title, Global_t *global, int highlight);

////////////////////////////////////////////////////////////
/// add
////////////////////////////////////////////////////////////

void handle_add_sound(Global_t *global);
void input_ncurses(char *buffer, size_t size, int begin);

////////////////////////////////////////////////////////////
/// bd_gestion
////////////////////////////////////////////////////////////

void read_sounds(Global_t *global);
void write_sounds(Global_t *global);

////////////////////////////////////////////////////////////
/// delete
////////////////////////////////////////////////////////////

void handle_delete_sound(Global_t *global);

////////////////////////////////////////////////////////////
/// flag_gestion
////////////////////////////////////////////////////////////

void flag_gestion(int ac, char **av, Global_t *global);

////////////////////////////////////////////////////////////
/// play
////////////////////////////////////////////////////////////

void handle_play_sound(Global_t *global);
void play_sound(const char *file_path, int is_ncurses);

////////////////////////////////////////////////////////////
/// update
////////////////////////////////////////////////////////////

void handle_update_sound(Global_t *global);

////////////////////////////////////////////////////////////
/// volume
////////////////////////////////////////////////////////////

void handle_volume(void);

////////////////////////////////////////////////////////////
/// commands
////////////////////////////////////////////////////////////

void command_add(char *name, char *path, Global_t *global);
void command_upd(int id, char *new_name, char *new_path, Global_t *global);
void command_del(int id, Global_t *global);

////////////////////////////////////////////////////////////
/// search_program
////////////////////////////////////////////////////////////

int search_programm(Global_t *global, int *highlight, const char *title);

#endif /* !HEADER */
